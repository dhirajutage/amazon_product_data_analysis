create or replace procedure amazon.amazon_prod.proc_fact_reviews_ld()
returns varchar
language javascript

as     
$$  

try {

var step_num = 1
var step_desc = "Create temp table "
var sql_stmt = `create or replace temporary table amazon.amazon_prod.vw_lnd_reviews_fact_temp as
select * from amazon.amazon_prod.vw_lnd_reviews_fact ;`

var result = snowflake.execute({sqlText: sql_stmt })

var step_num = 1
var step_desc = "create temp fact  table "
var sql_stmt = `create or replace temporary table amazon.amazon_prod.temp_fact as
select 
     pro.product_id,
     rev.id as reviewerid,
     strtok_to_array( replace( replace(helpful,'['),']') ,',') as helpfu,
     fact.reviewtext,
     fact.overall,
     fact.summary,
     fact.unixreviewtime,
     fact.reviewtime,
     current_timestamp created_timestamp,
     current_timestamp as last_updated_timestamp,
     row_number() over(partition by pro.product_id,rev.id order by id) as row_num
from amazon.amazon_prod.vw_lnd_reviews_fact_temp fact,
     amazon.amazon_prod.dim_products pro,
     amazon.amazon_prod.REVIEWER_DIM rev
where trim(fact.asin) = trim(pro.asin)
  and trim(fact.reviewerid) = trim(rev.reviewer_id)
qualify row_num = 1 ;`

var result_1 = snowflake.execute({sqlText: sql_stmt })

var step_num = 3
var step_desc = "merge with target_table "
var sql_stmt = `merge into amazon.amazon_prod.reviews_fact tar 
using amazon.amazon_prod.temp_fact src
on tar.product_id = src.product_id
and tar.reviewerid = src.reviewerid
and tar. review_retrieval_date  = src.reviewtime
when  matched then update set 
     tar.helpful =src.helpfu  ,
     tar.reviewtext = src.reviewtext,
     tar.overall = src.overall,
     tar.summary = src.summary,
     tar.unixreviewtime =src.unixreviewtime,
     tar.review_retrieval_date = src.reviewtime ,
     tar.last_updated_timestamp = current_timestamp
when not matched then insert(
product_id ,
reviewerid ,
helpful ,
reviewtext ,
overall  ,
summary ,
unixreviewtime ,
review_retrieval_date ,
created_timestamp ,
last_updated_timestamp )
values(

src.product_id ,
src.reviewerid ,
src.helpfu ,
src.reviewtext ,
src.overall  ,
src.summary ,
src.unixreviewtime ,
src.reviewtime ,
src.created_timestamp ,
src.last_updated_timestamp
);`

var result = snowflake.execute({sqlText: sql_stmt })

return "Success"
}

catch (err)  {
 
 var error_code = err.code
 var error_message = err.err.message
return "Failure"
}

$$;

